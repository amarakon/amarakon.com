[{"content":" In my previous blog post titled How to Install Gentoo – The Efficient Way, I said that Gentoo Linux is “truly the best operating system of all time” (Al-Zubaidi, 2022). I stand by that statement and there are many reasons as to why I think it is. The top three currently most popular operating systems are Windows 10, macOS, and Chrome OS. You may or may not have heard of Linux.\n Figure 1: Operating system market share (Statcounter, 2022)  Technically, Linux is not an operating in and of itself, rather it is the core of the operating system and each distribution should provide all the additional programs required for that distribution. There are hundreds of distributions of Linux, so making a decision is tirelessly difficult for most people who are just getting started with Linux. Many people have the bad habit of constantly distribution-hopping between different distributions to experience all of them for themselves. Some people suggest to “choose the distro that works the best for you” (Smith, 2018), but the problem with this suggestion is that most people do not know what works best for them. The biggest issue that makes it difficult to choose the correct distribution is that too many of them are similar to each other. A lot of them are only different by their desktop environment, theme, and package manager. This post is not about solving the distribution-hopping problem, it will be instead focusing on how the Gentoo stopped me from continuing to do so.\nWhat makes Gentoo stand out from every other Linux distribution is that it is not similar to any other. Even its forks—such as Funtoo, Calculate Linux, and Redcore Linux—are not similar to pure Gentoo. The most distinct features of Gentoo is its package manager, system management, speed, and versatility.\nPortage: Package Manager In my opinion, Gentoo’s package manager, Portage, has the best syntax for any package manager. The output on the terminal is undoubtedly beautiful. Gentoo is a source-based based distribution. This means that compiles programs from their source code instead of using prebuilt binaries. The biggest benefit from this method is the ability to optimize the operating system for your specific computer using USE flags. To what extent you want to optimize Gentoo is absolutely your decision to make. You can go all out, setting as many USE flags as possible to achieve ultimate minimalism. You can set a moderate amount of USE flags to make the most important optimizations while leaving trivial options to their defaults. Or you can use no optimizations at all and instead benefit from the other perks that come with using Portage and—more broadly, Gentoo.\nThe second biggest benefit of Portage is greater security. When you install an precompiled binary—even if it is free software, you have to place your trust in whoever compiled it. It is possible that somebody could have changed the code and it would be impossible to prove it. The chances of this issue occuring is obviously impossible if you compile the software from its source code. You might think that it is unlikely to notice any malicious code in large projects, but that is definitely not the case.\nBen:\n In theory, at some point in time every line of code in Chromium, Linux, Firefox, etc. has been looked at by at least one person. Furthermore someone definitely looks at every change made. If the source code was ever non-malicious, it would be difficult to make it malicious.\n Nevertheless, there are a considerable amount of binary packages in Gentoo. You can check the names and the amount by running these commands respectfully:\n$ eix \u0026quot;\\-bin\u0026quot; -c --in-overlay gentoo | grep \u0026quot;\\-bin \u0026quot; $ eix \u0026quot;\\-bin\u0026quot; -c --in-overlay gentoo | grep \u0026quot;\\-bin \u0026quot; | wc -l If you do not have Gentoo installed and want to search for packages, the Gentoo Portage Overlays search engine is a good alternative.\nBinary packages are common for huge programs that take hours to build, or proprietary software. Gentoo prevents you from installing any software that is not licensed with a free license by default. I do not recommend installing proprietary software—but if you actually want to, set ACCEPT_LICENSE=\"*\" (The default is -* @FREE (Gentoo, 2021b).) Even binary packages have USE flags to customize them to the most possible, although less than source packages of course. Options other than USE flags exist and can be set globally in /etc/portage/make.conf or per-package in /etc/portage/package.env (Gentoo, 2022a, 2022b). These include compiler flags, make and emerge options, features, CPU flags. Each of these options are covered extensively in the Gentoo wiki.\n eselect: System Management There are ways other than the use of the package manager with which you can configure your operating system. Most distributions do not pay attention to this, thus they have poor system configuration. Arch Linux, which has the excellent package manager pacman, has bad system management otherwise. Gentoo includes the eselect command which allows you to easily manage your system. You can easily manage software versions, environment variables, repositories. It is a nice bonus feature that shows the passion and attention to detail the Gentoo developers have. Despite the difficult installation process, Gentoo is the easiest distribution to use. To give an example, it is much easier and safer to set your /bin/sh symlink. On Arch, you would have to risk breaking your entire system by running this command:\n# ln -sfT /bin/dash /bin/sh On Gentoo, you can use eselect:\n# eselect sh set dash  Speed Gentoo Linux was named after the gentoo penguin, the fastest swimming species of penguin (Wikipedia, 2022). The gentoo penguin is also slim (minimalist) unlike emperor penguins which are fat (bloated). This is probably not intended, but a detail I noticed. The reason Gentoo is very fast is its extensive customization. As discussed before, you can optimize the operating system to suit your computer and needs. This causes it to run considerably faster, since there is minimal bloat and software is trimmed down. Gentoo boots faster than most other operating systems due to this minimalism and its init system, OpenRC. It takes less than ten seconds to fully boot a computer even when using BIOS—which is slower than UEFI.\nGentoo’s resource usage is always surprisingly low. I rarely ever exceed one gigabyte of memory usage even with many windows and browser tabs open. Since the file size of customized binaries is smaller than those of prebuilt binaries, you will notice more free disk space when using Gentoo. Just make sure to clean out your source code files and prebuilt binary packages. You can do so with eclean. You will also be able to complete the same tasks with a slower CPU frequency, saving electricity and money. I notice that it is generally much snappier in every way than any other operating system I have ever used.\n Versatility Gentoo Linux is versatile because it can do anything on any type of computer. It is currently available for nine different CPU architectures (Gentoo, 2021a). You can install Gentoo on anything between a Raspberry Pi and a supercomputer. It works equally well for all types of computers because it is optimized for the specific type of computer. The reason (unlike most original distributions) it has barely any derivatives is that it’s already complete and does not need any major changes. The only gripe I have with Gentoo is that some of its software—including Portage, is written in Python. But with the native-extensions USE flag, Portage will be compiled with native C extensions to speed it up. Gentoo Linux is the closest thing to a perfect operating system.\n References Al-Zubaidi, Amar. (2022). How to install gentoo – the efficient way. https://amarakon.github.io/amarakon.com/blog/how-to-install-gentoo-the-efficient-way  Gentoo. (2021a). Handbook: Main page. https://wiki.gentoo.org/wiki/Handbook:Main_Page  Gentoo. (2021b). License groups. https://wiki.gentoo.org/wiki/License_groups  Gentoo. (2022a). /etc/portage/make.conf. https://wiki.gentoo.org/wiki//etc/portage/make.conf  Gentoo. (2022b). /etc/portage/package.env. https://wiki.gentoo.org/wiki//etc/portage/package.env  Smith, Luke. (2018). What is ‘the best’ linux distro? https://lukesmith.xyz/blog/what-is-the-best-linux-distro  Statcounter. (2022). Desktop operating system market share worldwide. https://gs.statcounter.com/os-market-share/desktop/worldwide  Wikipedia. (2022). Gentoo linux. https://en.wikipedia.org/wiki/Gentoo_Linux    ","date":"2022-05-04","permalink":"https://amarakon.github.io/amarakon.com/blog/gentoo-linux-the-best-operating-system-ever-made/","tags":["foss"],"title":"Gentoo Linux: The Best Operating System Ever Made"},{"content":" So you finally moved from the beginner distributions and you know want to install truly the best operating system of all time; Gentoo Linux. Contrary to popular belief, installing this operating system is not difficult in the slightest but it is certainly time consuming. Usually it will take around five hours to install. This might deter you, but remember that this operating system will actually save you time in the long run. Not only is it faster than other operating systems, it also makes the user more intelligent, leading to efficient computer usage. No current Gentoo user regrets spending five hours installing the operating system to save many more hours in total.\nFor this installation tutorial, you will need to have an existing Unix-like operating system—like any Linux distribution. Before I get to the beginning of the installation process, there are a few things you must know. First, you have to care about computing for the installation of Gentoo to be worth it. Second, please view the Gentoo handbook while you are watching this video. It is unlikely but possible that some of the information in this video will be outdated. The Gentoo wiki also has many details that I will not go into because they are not important enough. Third, you need to know the architecture of your computer’s CPU, usually it is AMD64. Finally, you must know whether your computer firmware uses BIOS or UEFI. Generally, only extremely old computers support only BIOS, only terrible new computers support only UEFI, and most computers support both. You should be completely sure though to avoid messing your entire installation.\nPrepare the Disks Obviously, since Gentoo requires installation from the command-line, you will need to open a terminal. Use the lsblk command do check the available block devices. To be cautious, you can unplug any storage devices you do not want to accidentally wipe. Also make sure to know which block device your current running operating system so you do not accidentally wipe that either. Use the wipefs command to wipe a block device if it already has a partition scheme. Then use the cfdisk command to begin partitioning.\n$ lsblk # wipefs -a /dev/*NAME* # cfdisk /dev/*NAME* If you’re using BIOS, select DOS. And if you’re using UEFI, select GPT. If you’re using BIOS, all you need is one partition. If you’re using UEFI, you need to make a partition that is at least 128 MB, this will be the boot partition. You should label this partition “EFI system.” Then create the second partition using the rest of the space.\nOnce you exited cfdisk, you need to format your partitions. If you’re using BIOS, all you have to do is format your one partition as ext4 or any other usable file system you prefer:\n# mkfs.ext4 /dev/*NAME*1 If you’re using UEFI, you must format your first partition as VFAT and your second partition your preferred file system:\n# mkfs.fat -F 32 /dev/*NAME*1 # mkfs.ext4 /dev/*NAME*2 If you’re using BIOS, mount the root partition:\nmkdir /mnt/gentoo mount /dev/*NAME*2 /mnt/gentoo If you’re using UEFI, mount the root partition and the boot partition:\n# mkdir /mnt/gentoo # mount /dev/*NAME*2 /mnt/gentoo # mount /dev/*NAME*1 /mnt/gentoo/boot  Installing the Gentoo Installation Files Temporarily set the correct date and time using the MMDDhhmmYYYY syntax:\n# date *MMDDhhmmYYYY* Go to the download section of the Gentoo wiki and copy the link of a stage tarball. I recommend the standard Stage 3 OpenRC. Download the tarball to /mnt/gentoo using the link you copied. Decompress the archive afterwards.\n$ cd /mnt/gentoo # wget *URL* # tar xpvf stage3-*.tar.xz --xattrs-include=\u0026#39;*.*\u0026#39; --numeric-owner Run # nano /mnt/gentoo/etc/portage/make.conf. Set march equal to native. The -j flag means the amount of threads you want Portage, the package manager to use. The -l flag means the load average. The PORTAGE_NICENESS option refers to how much priority portage should have (the higher the number, the higher the priority). Setting ACCEPT_KEYWORDS=\"~amd64\" will allow portage to install bleeding edge software. The VIDEO_CARDS option is dependent on your video card (Gentoo, 2020). The USE flags are for features you want or do not want in your packages. The GRUB_PLATFORMS option should be set to \"pc\" for BIOS and \"efi-64\" or \"efi-32\" for UEFI. Copy everything else I did.\nCOMMON_FLAGS=\u0026quot;-march=native -O2 -pipe\u0026quot; CFLAGS=\u0026quot;${COMMON_FLAGS}\u0026quot; CXXFLAGS=\u0026quot;${COMMON_FLAGS}\u0026quot; MAKEOPTS=\u0026quot;-j2 -l3.6\u0026quot; EMERGE_DEFAULT_OPTS=\u0026quot;-j2 -l3.6\u0026quot; PORTAGE_NICENESS=\u0026quot;1\u0026quot; ACCEPT_KEYWORDS=\u0026quot;~amd64\u0026quot; VIDEO_CARDS=\u0026quot;intel i915 i965\u0026quot; USE=\u0026quot;X pulseaudio savedconfig -bluetooth -geolocation -drm\u0026quot; # NOTE: This stage was built with the bindist Use flag enabled PORTDIR=\u0026quot;/var/db/repos/gentoo\u0026quot; DISTDIR=\u0026quot;/var/cache/distfiles\u0026quot; PKGDIR=\u0026quot;/var/cache/binpkgs\u0026quot; # This sets the language of build output to English. # Please keep this setting intact when reporting bugs. LC_MESSAGES=C L10N=\u0026quot;\u0026quot; # Other GRUB_PLATFORMS=\u0026quot;pc\u0026quot; GENTOO_MIRRORS=\u0026quot;https://mirror.csclub.uwaterloo.ca/gentoo-distfiles/ https://gentoo.osuosl.org/ https://mirrors.rit.edu/gentoo/ http://mirror.csclub.uwaterloo.ca/gentoo-distfiles/ http://gentoo.osuosl.org/ http://mirrors.rit.edu/gentoo/\u0026quot;  Installing the Base Set up the gentoo repository:\n# mkdir -p /mnt/gentoo/etc/portage/repos.conf # cp /mnt/gentoo/usr/share/portage/config/repos.conf /mnt/gentoo/etc/portage/repos.conf/gentoo.conf # cp --dereference /etc/resolv.conf /mnt/gentoo/etc/ Mount necessary file systems:\n# mount --types proc /proc /mnt/gentoo/proc # mount --rbind /sys /mnt/gentoo/sys # mount --make-rslave /mnt/gentoo/sys # mount --rbind /dev /mnt/gentoo/dev # mount --make-rslave /mnt/gentoo/dev # mount --bind /run /mnt/gentoo/run # mount --make-slave /mnt/gentoo/run  Enter the new installation environment by chrooting into it:\n# chroot /mnt/gentoo /bin/bash # source /etc/profile # export PS1=\u0026quot;(chroot) ${PS1}\u0026quot; Installing a Gentoo ebuild repository snapshot from the web and update it:\n# emerge-webrsync # emerge --sync Update the @set (all of your packages). This will take a lot of time. If you get a circular dependency error, which is not uncommon, consult the Gentoo wiki (Gentoo, 2022a):\n# emerge -uDN @world  Select the time zone for the system. Look for the available time zones in /usr/share/zoneinfo/. I chose America/Toronto.\n$ ls /usr/share/zoneinfo # echo \u0026quot;America/Toronto\u0026quot; \u0026gt; /etc/timezone # emerge --config sys-libs/timezone-data Choose the right locale by running # nano /etc/locale.gen:\nen_CA.UTF-8 UTF-8 locale-gen Check the locale list by running $ eselect locale list, then select the right one:\nAvailable targets for the LANG variable: [1] C [2] C.utf8 [3] en_CA.utf8 [4] POSIX [ ] (free form) # eselect locale set 3 Reload the environment:\n# env-update \u0026amp;\u0026amp; source /etc/profile \u0026amp;\u0026amp; export PS1=\u0026quot;(chroot) ${PS1}\u0026quot;  Install the Kernel The easiest way to install the kernel is by installing the gentoo-kernel package. If you wan to customize the kernel, check the Gentoo handbook page on configuring the Linux kernel (Gentoo, 2015) If you need Linux firmware (you most likely do), then install the linux-firmware package.\n# emerge gentoo-kernel linux-firmware  Configure the System You need to set up fstab:\n# blkid \u0026gt; /etc/fstab Open the file by running # nano /etc/fstab. If you have an SSD, you should enable the noatime and discard options. If you are using BIOS, arrange your fstab to something like this:\n# /dev/sda1 UUID=9167fa6f-bb77-4337-a547-48a20506d297 / ext4 noatime,discard 0 1 If you are using UEFI, do something like this instead:\n# /dev/sda1 UUID=dbb15f21-c203-4665-a520-7f92f51661ae /boot vfat defaults,noatime 0 2 # /dev/sda2 UUID=9167fa6f-bb77-4337-a547-48a20506d297 / ext4 noatime,discard 0 1 Set the host name by running # nano /etc/conf.d/hostname:\nhostname=\u0026quot;*host name*\u0026quot; Install NetworkManager and add it to the default runlevel for internet connection:\n# emerge net-misc/networkmanager # rc-update add NetworkManager default Edit the hosts file by running # nano /etc/hosts:\n127.0.0.1 localhost ::1 localhost 127.0.1.1 *host name* Set the root password by simply running # passwd.\n Configure the Bootloader You now need to install a bootloader, the most common one is GRUB. When using BIOS:\n# emerge sys-boot/grub # grub-install /dev/*NAME* # grub-mkconfig -o /boot/grub/grub.cfg When using UEFI:\n# emerge sys-boot/grub # grub-install --target=x86_64-efi --efi-directory=/boot # grub-mkconfig -o /boot/grub/grub.cfg Reboot the system # exit # cd # umount -l /mnt/gentoo/dev{/shm,/pts,} # umount -R /mnt/gentoo # reboot   Finalize the Installation First, log in as root:\nLogin: root Password: *password* Add a user for daily use and set its password:\n# useradd -mG wheel,news,audio,video,portage *user* # passwd *user* Finally, remove the now unneeded tarball from the root directory:\n# rm /stage3-*.tar.* Congratulations, you have successfully completed the installation of Gentoo Linux. But do not get too excited, because we are not technically done yet.\nGraphical Environment Now all you need to do is install a display server, xinit or a desktop manager, and a window manager or a desktop environment.\n# emerge x11-base/xorg-server x11-apps/xinit x11-wm/dwm $ echo \u0026quot;exec dwm\u0026quot; \u0026gt; ~/.xinitrc $ startx   References Gentoo. (2015). Configuring the linux kernel. https://wiki.gentoo.org/wiki/Handbook:AMD64/Installation/Kernel  Gentoo. (2020). Video cards. https://wiki.gentoo.org/wiki/Category:Video_cards  Gentoo. (2022a). Circular dependencies. https://wiki.gentoo.org/wiki/User:Sam/Portage_help/Circular_dependencies  Gentoo. (2022b). Gentoo AMD64 handbook. https://wiki.gentoo.org/wiki/Handbook:AMD64    ","date":"2022-05-03","permalink":"https://amarakon.github.io/amarakon.com/blog/how-to-install-gentoo-linux-the-efficient-way/","tags":["foss","tutorial"],"title":"How to Install Gentoo Linux – The Efficient Way"},{"content":" I am a high school student who happens to be genuinely interested in technology. Specifically, I am interested in operating systems, programming, and free software philosophy. I have a good understanding of what makes a good piece of technology and what makes a bad piece of technology. One of the most important factors in this distinction is the effort it requires to use it. If a piece of technology is extremely complicated but effortless to use (i.e., dumbed down), then it is generally bad. If a piece of technology is minimalist but requires genuine effort to use (e.g., C, LaTeX, flip phones), then it is generally good.\nThe pandemic gave teachers an excuse to be lazy and government the excuse to be tyrannical. The government did an uncountable amount of lockdowns and schools went online during them. Exams were canceled, so it is unsurprising that the majority of students supported the cruel lockdowns as well. Since we were dependent on technology for school, what I have noticed is that education wants to dumb down technology.\nClassroom is Terrible We used a website developed by Google called Classroom. This is the one of the worst websites I have ever had to use in my entire life. First, it is extremely slow. Each page takes a couple of seconds to load while most other websites I use load instantly. The design is also too plain and the website is too bright. The purpose of these seemingly bad decisions is to dumb it down; to make it accessible to everyone. This might seem like a good thing to do, but for most people who can actually use computers properly, it slows us down. If we are dependent on easy-to-use technology, it is inevitable that we become less intelligent.\nAnother more important reason school boards decided to use Classroom for online education is the fact that Classroom is developed by Google. Many people think that Classroom is superior because it can easily interact with other Google services such as Meet. But this fact does not make Classroom any better, it only makes it worse. It is designed to create an ecosystem in which everything is more convenient, but everything is also more restrictive. One of my classes was called ACAM, I forgot what this acronym stands for. In this class, we used creative technology programs such as Blender, Photoshop, Illustrator. I thoroughly enjoyed that class, but the main issue that bothered me about it is that we never went in depth. We were always only at the surface level.\n Wix is a Scam When we were designing our website, we designed them with Wix. Wix is a website to design websites, and its main attraction is that it is “easy” to use. Instead of actually writing the code necessary to create a website, you design a website in the website. This is not anywhere near as easy as it sounds. It took me many hours just to get my blog up and running, and most of the time was not spent actually writing. This is a classic example of something that is only supposed to appear easy to attract normies into it. I promise you that not one good, respectable website has ever been designed with Wix or any of those other website-creating websites created by lazy entrepreneurs for lazy entrepreneurs. Likewise, I do not think anyone from my ACAM class will ever grow up to use creative technology in their profession. They might use it in other school assignments, but probably not in the real world.\nCreative technology education in school is not meant to prepare students for the real world, rather to deter them from it. They never taught us actual HTMl and CSS, or at least any decent package that will convert markup to HTML and CSS. Even though those methods require actual effort and perseverance, they are the only way you can make a respectable website. With Wix, everyone’s experience is the basically same. In my class, the range of marks was not wide; it was surprisingly narrow. This is not due to lenient marking from my polite teacher—although that could be a factor. This was mainly due to the fact that this technology was dumbed down. There was no real challenge so there was no real reward either.\nThis Website I created this website with an R package called blogdown, getting it up and running was the terribly hard part. But after it is up and running, everything else is smooth sailing. With Wix, getting your website up and running is the easy part—but generally adding things to your website is bound to be difficult. Moreover, I am in complete control over what my website ends up actually looking like. Wix cannot possibly give you that control even if it wanted to because you are not working directly with the website. You are working indirectly with the website and underneath is where Wix itself is handling all the HTML, CSS, and JavaScript. The important “separation of content and presentation” design principle is ignored in favor of the convenient “what you see is what you get” principle. Most people who use Wix do not even know what those things mean even though they should, as they are not supposed to.\n  Computer Science Since I was only slightly experienced in coding, I joined the computer science club in my school. I expected to expand my skills to prepare myself for actual coding instead of just writing scripts for my own use. On my first day in this club, I immediately noticed embarrassing issues. The teacher was teaching primarily on a white board, making the class seem more like a math class. Not only that, we were also doing work with a pencil and paper. In pretty much every other class, teachers have refrained from printing documents and are now creating online assignments on Classroom. This pathetic downgrade of education has been justified by the irrational excuse of “protecting the environment.” Everyone was used to it after the lockdowns so no one was surprised nor did they care. I might be completely alone in thinking that all worksheets should be printed for those who do not want to depend on technology. But I am definitely not alone in thinking that it’s ridiculous to be spending most of our time in a computer science class on paper and whiteboards.\nThe first and only language you learn in computer science club is Python. There are two problems here: Python is not a good language and schools should teach more than one language. Python is a mediocre language because even though it has readable syntax, it is extremely slow and inapplicable. Almquist shells such as DASH and BASH should be taught first due to their ease of use, practicality, and helpfulness. They are commonly used to automate boring and repetitive tasks. The vast majority of my projects on GitHub are written in shell; I wrote them for my personal use to automate tasks. One-letter languages like C and R should be taught afterwards. They are significantly harder but significantly more powerful as well. Markup languages, such as LaTeX and Markdown, are also important and are widely used for printing or digital distribution.\n Solution Like many other problems, this problem has been intentionally created. It is no accident that schools deter people from being uniquely intelligent. The education system is designed to sterilize individuality and encourage mob mentality. The mob mentality thinks “If Wix and Python are the popular choices, they must be good, right?” The solution to this problem is obvious: The education system should encourage proper and effortful methods as opposed to dumbed down and effortless ones. Linux Mint should be the operating system installed on school computers instead of Windows 10. The blogdown package for creating websites should be taught in schools instead of Wix—it is easier, smarter, and better in every way possible. Shell, C, R, LaTeX, Markdown, HTML, CSS are examples of computer languages that should be taught instead of Python.\n ","date":"2022-05-02","permalink":"https://amarakon.github.io/amarakon.com/blog/education-wants-to-dumb-down-technology/","tags":["websites","programming"],"title":"Education Wants to Dumb Down Technology"},{"content":" What I have noticed about many subjects in life is that many people just want to be sheep. Notice how I said “want to be sheep” and not “are sheep.” That is because my emphasis is on the fact that people are choosing to be ignorant. This is true in many cases, especially in politics and computing. In this post, I will be focusing on computing. I want to clarify by saying that I think there is nothing wrong with being ignorant, but it is wrong to be willfully ignorant.\nI remember a couple of years ago I was a very different person than I am today. I was a textbook example of a normie. I would use pretty much the same software everybody else was using. My operating system was Windows 10, my music player was Spotify. There is nothing morally wrong with being that way, but when you are a normie, it is extremely easy to be influenced and taken advantage of. You follow what everybody else was doing regardless if it is good or bad.\nChange One day, I was scrolling through YouTube and I found something that intrigued me. It was a video of somebody comparing three-dimensional rendering between Windows 10 and Linux. I was extremely surprised by how much Linux is blatantly better than Windows 10. For the next couple of weeks, I experimented with Linux without much success. I found it extremely difficult to get basic things done, like connecting to WiFi. Could it be that the normie lifestyle is correct and that alternatives are terrible most of the time?\nI almost gave up, but since I have come so far, I kept using Linux. I eventually solved my main issues with it. I spent the next couple of months experimenting with it and mastering it. During that time, I increasingly learned the evils of common software and how everybody—including myself, fell for that trap. I learned how the programs we use are brainwashing us. This is not an exaggeration in the slightest.\n Problem There is a tiny list of programs that people tend to use. It is surprising how small that list is and how it is still shrinking. There is not much diversity of thought when it comes to things like this. That is my point. That is what I am getting at with this post.\nNot only was I much more free literally by changing my choice of software, but I was free in my thinking as well. I could do things that I never could do before, and I understood things that I have always wanted to understand. It is impossible for me to explain it to you, it is something you must experience for yourselves. The easiest way to explain it is this; technology companies want their users to be ignorant, it benefits them. They want to be the geniuses making the complex programs that they would never use themselves, while you are the incompetent user. They do not want you to be in control.\nThis is evident when you find out that all tech billionaires are extremely strict about technology use. They want you to be a slave to their evil technology that you do not understand. But they do not want their kids to be, because those are just about the only people they truly care about. They know that if you did understand their technology, you would hesitate using it. If you did know that one company literally influences what you know and think about literally everything and which political ideology you support, Google would know that you would hesitate using their search engine. If you did know that your smartphone has devastating affects on your brain and mental health, smartphone companies would know that you would hesitate buying their products. I could go on and on with examples to prove that almost every single piece of technology we use today is problematic at least and purely evil at most.\n Solution To return to the first point I made, there is nothing wrong with being ignorant, but there is plenty of wrong with being willfully ignorant. I believe that most people are willfully ignorant to these facts. Most people would react to this the exact same way. First, they deny it. Then, once you prove it to them, they will justify it with bad excuses. They will pretend like there is nothing wrong with literally every major social media company banning the president of the United States at the exact same time. They will pretend like there is nothing wrong with your data being collected and used to control you. The underlying motivation for these denials and justifications is to hide from reality. Because they know that these things are wrong, but they do not want to take any action. Understandably, most people do not want to drastically change their current lifestyle.\nHowever, once you stop denying the corrupted reality and start embracing alternative software, you will realize just how much more free you will become. You will be able to do things you never could before. It can benefit your intelligence, your productivity, and much more. People have called me weird and a “conspiracy theorist” for my beliefs. But I know that since my beliefs are grounded in the truth and morality, I will never feel shame for them.\nJust like how in a democratic government, the people should control the government and not the other way around, the users should control tech companies and not the other way around. This is only possible by paying close attention to software licenses, free versus proprietary software, digital rights management, and other important subjects concerning freedom and software. Choose the best options based on those. You should also be extremely picky—because just like politicians, tech companies tend to be corrupt. You should pay attention to your choice of software so that you could finally have the computing freedom that you deserve.\n ","date":"2022-05-01","permalink":"https://amarakon.github.io/amarakon.com/blog/you-should-pay-attention-to-your-choice-of-software/","tags":["foss"],"title":"You Should Pay Attention to Your Choice of Software"}]