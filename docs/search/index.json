[{"content":"PDF is rightfully the standard output format for documents. All word processors can output to PDF, but it is difficult to convert PDF to files word processors can edit. Most people use “what you see is what you get” word processors like Microsoft Word, Google Docs, or LibreOffice Writer. This type of word processor is convenient but it is also limited and unprofessional. It is easier to get into, but it is harder to use in the long run. This is the problem with all “what you see is what you get” programs: they do not follow the “separation of content and presentation” design principle.\nMarkup word processors are practical and professional alternatives. However, there are so many of them and all of them are different. It can be tirelessly difficult to choose the correct one. It took me a surprisingly long time to choose the correct one for my uses. And it took me even more time to create the proper templates for easier use. Nevertheless, they are still much easier to use in the long run as once you set everything up, the actual usage is simple. Currently, the best markup word processors are Groff, LaTeX, Markdown, R Markdown, and Quarto. I will go over the pros and cons of each one so that you can make the best decision. I do not recommend using any other program than the ones listed in this post because these are the only good ones.\nGroff Groff (GNU troff) is a document formatting system included with all GNU operating systems. This makes it very convenient since you do not even have to install it. Other markup word processors require you to install their packages and these packages can potentially have hundreds of dependencies in total. Not everyone wants to install them and not everyone has enough storage space to do so. You can use the groff_ms macro package by passing the -ms flag to create PDF documents. It is equally convenient to render the document: running groff -ms \u0026lt;file\u0026gt;.ms -T pdf \u0026gt; \u0026lt;file\u0026gt;.pdf will quickly render it. Other markup word processors take longer to render documents because they are more complex It is commonly used to create man pages with the groff_man macro package.\nThe main problem with Groff is that it does not have enough features. Not everything is possible in Groff. For example: you can create mathematical equations but some of them are not possible. LaTeX—and all of the other markup languages that use LaTeX to render math (Markdown, R Markdown, Quarto)—can possibly create any mathematical equation. Groff lacks many other features including templates and geometry margin customization. All of the documents you create with Groff will look the same, so only consider using it if you like the default appearance.\nThe syntax for writing Groff documents is also annoying. All things that must be defined (like section headers and paragraphs) have to be defined using periods and capital letters. Formatted text (like bold and italics) have to be put on separate lines. Other than that, the syntax is fine. But because of Groff’s flaws, Groff documents’ source code cannot be read easily in plain text.\nLaTeX LaTeX is the golden standard for making PDF documents, and for good reasons. It is the very first important markup word processor. Almost all of the others are based on LaTeX. And for that, I have to give credit where credit is due. it does not have any major faults but it is good at pretty much everything. LaTeX documents can be rendered with pdflatex. Consider xelatex instead if you want to use a system font.\nLaTeX is exceptional at math typesetting. Most people will always write math on paper. This has its benefits but it is not impossible to have a nicely formatted and professional document with any math equations. All of the symbols—including plus and minus signs—are the perfect size as defined by the math font. Try creating anything like this without using LaTeX:\nFigure 1: Complex math made by LaTeX  LaTeX’s formatting is exceptional too. You can easily define everything with just a few commands. These include page size, text alignment, font size. It is much easier than having to toggle buttons in a graphical user interface. Its line and page breaking is the best out of any typesetting program.\nFigure 2: LaTeX line and page breaking  As mentioned before, none of LaTeX’s faults are major. The biggest problem with it is its commands. All commands use backslashes, which means you have to stretch your pinkie tirelessly often. Additionally, you have to use some commands just to make a working document. You cannot compile a document from just simple plain text. Its syntax is also generally too complicated at times. From my experience, a LaTeX file (.tex) usually has twice the amount of lines compared to an identical Markdown file (.md).\nMarkdown Markdown is a widely used markup language that is used for more than just PDF documents. If you want to use Markdown for PDF documents, you need to install LaTeX and the document converter Pandoc. No other packages are required to convert a Markdown file to a PDF file. Pandoc first converts the Markdown file to a LaTeX file. Then, it runs pdflatex—or, if defined in the YAML front matter, xelatex. Because of this extra step, Markdown documents always take longer to render than LaTeX documents.\nMarkdown’s syntax is much easier to learn and it is shorter too, because it was designed to be readable in plain text format. This is why LaTeX files usually have twice the amount of lines compared to identical Markdown files. Commands that should always be used in LaTeX (\\begin{document}... \\end{document}, \\maketitle) are automatically applied in Markdown. You do not have to write any commands, meaning you can write only completely plain text. Common commands that are used repeatedly in LaTeX (\\section{}, \\textbf{}, \\textit{}) can be replaced with shorter Markdown commands. To write italics in LaTeX, you need to write \\textit{\u0026lt;text\u0026gt;}. To write italics in Markdown, you need to write *\u0026lt;text\u0026gt;*. Not only does this make Markdown easier than LaTeX, it also makes it faster. Pure LaTeX code can still be used for LaTeX commands that do not have alternative Markdown commands.\nThe biggest downside with Markdown is that making tables is painful. It is just as tedious as with LaTeX, but LaTeX is expected to be that way. Markdown has its own way of making tables but it is not human-readable. It is strange and surprising that Markdown tables do not follow the Markdown philosophy. Moreover, line breaks and lists in tables require the use of grid tables. Grid tables are extremely complicated, require too much time to make, and they have to be lined perfectly. One small downside with Pandoc’s Markdown is that code blocks with syntax highlighting are impossible. On the contrary, code blocks with syntax highlighting work decently in most Markdown interpreters or compilers. Most people do not need to use code blocks though, so this is a minor issue.\nR Markdown R Markdown adds another layer of simplicity to the source code. It is similar to Markdown but it has more features. In order to use R Markdown, you need to have R and the rmarkdown package, LaTeX, and Pandoc. It has two more requirements than Markdown. R Markdown requires the most storage space out of all of the markup processors mentioned in this article. As you can imagine, its rendering process has one more step than Markdown. This makes its rendering time even longer than Markdown; the longest of all the programs here. First, it uses Knitr to “knit” the specified .Rmd file to the identical .knit.md file. Then pandoc does the rest of the work. Just like Markdown, R Markdown uses a YAML front matter at the top of the source code to define the document options.\nWhat makes R Markdown’s front matter stand out is that it has an extra option: output:. The output: option obviously defines the output format. This article is only about PDF documents (pdf_document), but keep in mind that R Markdown can be used for just about anything. This includes slideshows (beamer_presentation), HTML (html_document), GitHub (github_document). The bookdown R package can be used to add alternative output formats that make it possible to conveniently reference section headers, figures, tables, and equations (Xie et al., 2020). For example, use output: bookdown::pdf_document2 instead of output: pdf_document.\nUnlike Markdown, R Markdown can display code blocks with excellent syntax highlighting. It can also run the code specified if you use code chunks instead of code blocks. You must specify the programming language for the correct syntax highlighting and to actually run the code. There are many ways it is beneficial to run code in the document. The most common language to use in R Markdown documents is R. This allows certain output that is simply impossible with plain Markdown. It also allows it to overcome the biggest downside Markdown has: tables.\nAs an alternative to Markdown and Pandoc’s methods of making tables, R Markdown can use R packages to make tables. This is much more efficient and generally easier. You do not have to worry about alignment, readability, and typos. It is more professional too, as you would make them programmatically instead of using plain text. The most common R function to create tables is kable, which is from the knitr package that is installed as a dependency of rmarkdown. Other packages include flextable, huxtable, reactable, xtable, pander. The package I use is pander. kable is flawed because even though it is simple, it still does not support proper line breaks and lists. This is why I prefer pander.\nR Markdown has the best documentation out of all the markup word processors in this article. R Markdown has many excellent books such as R Markdown Cookbook that easily explain R Markdown like you are five years old. When searching for answers to common problems—especially on StackOverflow, most results will be for R Markdown. This is true even when searching for LaTeX, Markdown, or Quarto specifically. Most R packages have documentation at rdocumentation.org. R Markdown documentation managed to teach me more about LaTeX, Markdown, and Quarto than all of those programs’ documentation themselves.\nQuarto Quarto is best understood as an alternative to R Markdown. R Markdown struggles from requiring too many packages, thus consuming too much storage. It also takes a long time to fully render the .Rmd file to the .pdf file. Quarto’s render time is shorter than R Markdown’s but longer than Markdown’s. It also has native support for Python, R, Julia, and Observable. R Markdown does not have native support for Python, Julia, or Observable. R Markdown is designed for R users, while Quarto is designed for all users. R Markdown has better documentation and is more versatile than Quarto. I do not recommend Quarto because it is new, undeveloped, and not special enough for me to make the switch. Users of R Markdown should not use Quarto unless they have a specific reason to do so.\nReferences Xie, Yihui, Dervieux, Christophe, \u0026amp; Riederer, Emily. (2020). R markdown cookbook (1st ed., pp. 38–39). Chapman \u0026amp; Hall/CRC.\n  ","date":"2022-05-13","permalink":"https://amarakon.github.io/amarakon.com/blog/comparing-the-best-markup-languages-for-making-pdf-documents/","tags":["foss","markup"],"title":"Comparing the Best Markup Languages for Making PDF Documents"},{"content":"Conservatives and liberals strongly disagree on when killing another human being should be considered acceptable. They both agree that killing is justified in self-defense, but the agreements end there. Conservatives usually think that abortion and euthanasia are wrong while capital punishment (the death penalty) is just. They argue that killing an innocent and defenseless person (abortion and euthanasia) is always wrong while killing soulless criminals (the death penalty) is just. On the other hand, liberals think that abortion and euthanasia are sometimes justifiable while the death penalty is unjust. They argue that it is a woman’s right to choose, we should end the suffering of ill people, and that the death penalty is too harsh and cruel. Both sides cannot seem to understand each other, and they are often heated about these subjects. The purpose of this post is to present facts and what my opinion on these three subjects are. I agree with the conservative view that abortion and euthanasia are wrong while capital punishment is just.\nAbortion Abortion is wrong because it is the killing of an innocent and defenseless child. This is defined as infanticide: the intentional killing of infants or offspring. Science shows that life undeniably begins at conception (Miranda \u0026amp; June, 2017). To respond to the argument “A fetus is just a clump of cells,” I can easily say that we are all clumps of cells. According to the cell theory, all living things are made of cells. If it is okay to kill clumps of cells, then it is okay to kill anyone. This argument tries to make the baby seem less important because it is small. If that is true, killing newborn babies would not be wrong either. All of the pro-abortion arguments are hypocritical and can be easily refuted by pointing out their hypocrisy.\nIf you had to choose between a ten-year-old dying and an eighty-year-old dying, which would you pick? You would probably choose the eighty-year-old. You do not know if the eighty-year-old is a better person than the ten-year-old. But most people would choose the eighty-year-old because he already lived most of his life anyways. We know that it is especially wrong to kill people when they are young because it is robbing them of something valuable that they have not experienced enough yet. I view abortion in a similar manner: Killing an unborn baby is worse than killing a newborn baby.\nHow abortions are performed If you are pro-abortion, it is important to understand the process of an abortion before you support it. If you are pro-life, it is not mandatory but recommended to understand the process of an abortion. Abortion is wrong just from the idea of killing an unborn baby, but it goes further than that. It is no surprise that most pro-abortion people are unaware of how violent and truly disturbing this procedure is. If the baby is young enough (less than 13 weeks), the abortionist inserts a vacuum-like tool into the woman’s vagina and since the baby’s bones are not strong enough, all of the baby’s body parts are sucked through the vacuum. Otherwise, the abortionist has to use a tool to manually break off each of the baby’s body parts and pull them out of the vagina. You may notice a white fluid flowing out of the cervix, that is the baby’s brain. In a second-trimester abortion, the “doctor” literally sucks the baby’s brain out. I was pro-life before researching the process of an abortion, but I considered it a gray area. There is no changing my mind now, just listening to the procedure described makes me feel sick.\n  If you still support abortion, search for images of aborted babies. It is too disturbing for me to show an image here. If you still support abortion after that, I do not even know what to say to you.\nCapital Punishment The death penalty should be more controversial than abortion, but it sadly is not. First, the death penalty is completely constitutional. It does not violate any human rights and everyone who claims it does speaks broadly. The constitution of America says that a person may not be “deprived of life, liberty or property without due process of law.” This clearly proves that it is okay to deprive someone of life, liberty, and property with due process of law. If the person killed by the death penalty is truly and rightly convicted, then it is constitutional and just.\nSome people might worry that innocent people might be sentenced to death. Obviously, it is impossible for us to bring a dead innocent person back to life. But it is surprisingly unlikely for innocent people to be sentenced to death. There is a long period of time that people sentenced with the death penalty will spend in jail. The death penalty is not given to people who steal a loaf of bread to their family. It is not even given to all murderers. It is given to the most heinous of criminals who deserve no sympathy or mercy. We should put trust in the criminal justice system and not use errors as an argument. If it is not trustworthy, it can be improved and we will not have to worry about this. This is a problem that, if it exists, should be solved directly by improving the justice system and not indirectly by abolishing the death penalty. We should not worry about this though because all people have the right to due process.\nThe last and most obvious argument in support of the death penalty is crime control. Harsher punishments for violent crimes will undoubtedly decrease violent crime rates. And the only thing harsher than a longer sentence is a sentence to death. It does not make sense for a person who killed someone to get the same sentence as a serial killer. The person who killed someone should receive life imprisonment while the the serial killer should receive the death penalty. After the serial killer dies, they will rightly spend eternity in hell and get just punishment from God after they received just punishment from the justice system. Because of the death penalty, criminals will think twice before committing heinous crimes.\nWhat I noticed about people who support the death penalty is that they will often feel more sympathy for violent criminals than their victims. They will claim otherwise but actions speak louder than words. Kim Kardashian is a perfect example of these types of people.\nA terrible case has been brought to my attention and I need your help. Without it, on December 12th Brandon Bernard is going to be executed for a crime he participated in as a teenager. pic.twitter.com/PkbpAprMbv\n\u0026mdash; Kim Kardashian (@KimKardashian) November 29, 2020  First, I want to say that a terrible crime was committed and me fighting for a stay of execution does not take away from the sympathy I have for the victim\u0026#39;s Todd and Stacie Bagley, and their families. My heart breaks for everyone involved.\n\u0026mdash; Kim Kardashian (@KimKardashian) November 29, 2020  This is the only tweet I saw her make about the victims of this crime. She only said it to look fair. Her heart only breaks for the criminal and not the victim. Kim Kardashian is a textbook example of a narcissist.\n“An eye for an eye and a tooth for a tooth.”\nEuthanasia Euthanasia (assisted suicide) is a gray area for many people, honestly including myself. On one hand, it quickly ends the pain and suffering of an ill person. The word “euthanasia” comes from Greek and it means “good death.” On the other hand, it is a form of killing an innocent human being. I lean towards the side of thinking that euthanasia is wrong should be considered murder.\nWhy do we as a society believe that suicide is wrong? Because killing innocent people is always wrong, whether it is someone else or yourself. People who commit suicide irrationally believe that nothing can get better and that everyone will be better off without them. Everyone else knows this is incorrect, and it causes tremendous pain to everyone who loves that person. Even if it was somehow correct, that would not justify committing suicide. Life is precious and it must be preserved as much as possible. Everyone who commits suicide is mentally ill which causes them to be unable to think clearly. I view euthanasia in a similar manner as other cases of suicide. But logically euthanasia is not even suicide; it is assisted suicide. Assisted suicide is worse than regular suicide because it involves someone who is rational that helps the irrational person do something extremely immoral. Assisted suicide is homicide, thus euthanasia is homicide.\nReferences Miranda, Fred, \u0026amp; June, Patricia. (2017). When human life begins. https://acpeds.org/position-statements/when-human-life-begins\n  ","date":"2022-05-10","permalink":"https://amarakon.github.io/amarakon.com/blog/abortion-capital-punishment-and-euthanasia-when-is-killing-acceptable/","tags":["politics","death"],"title":"Abortion, Capital Punishment, and Euthanasia – When is Killing Acceptable"},{"content":"There are many benefits of preferring command-line software over graphical software. Graphical User Interfaces generally promote lazy thinking. Command-line interfaces generally promote critical thinking. I think it is unfortunate that most people have not even heard of command-line software. Whenever I would be doing my work in school by running commands, most people who pass by would assume that I am coding. This is obviously because they have not used command-line programs, so their view of a dark terminal window and fast typing of commands they do not understand leads them to this conclusion. That then leads them to the conclusion that anything other than a modern graphical “app” is too difficult for them. This is why most people do not use command-line software.\nIn order to efficiently use computers, you need to get rid of this mindset.\nUnix Philosophy  This is the Unix philosophy: Write programs that do one thing and do it well. Write programs to work together. Write programs to handle text streams, because that is a universal interface.\n— Ken Thompson\n Graphical programs do not follow any of these three rules of the Unix philosophy. The Unix philosophy is important because it outlines the criteria software needs to be considered good. Command-line programs follow the Unix philosophy most of the time, hence they are good most of the time Critics of the Unix philosophy argue that “the user interface is horrid” (Norman, 1981). Truthfully, Unix’s user interface is amazing. Command-line interfaces are simpler and easier to understand than graphical ones. They are just not dumbed down for stupid people.\nDo one thing and do it well Programs should do one thing and do it well because programs are otherwise bloated. Bloated programs are ones that are too large in their code-base. They tend to be slower than they are supposed to be because they are trying to fulfill more than one purpose. Each program should serve one purpose, that is why there is more than one program. If the program doesn’t serve one and only one main purpose, the program is too versatile. “Worse is better” seems like a contradictory statement by Richard Gabriel, but what it really means is that certain things may sound worse on paper, but truly are better in practice. One such example is a less versatile program.\nWork together Another reason programs should do one thing and do it well is that they should work together. Instead of having one big program that does everything, have many small programs that do one thing well and work together. This is the main difference between command-line and graphical programs. Command-line programs naturally work well together using pipes; you can pipe the output of one command to another. Each command-line program is small but has its own unique purpose, and they all use the same interface so they should be expected to always work together. Graphical programs on the other hand, cannot naturally work well together because they are large and versatile. A graphical program can only be used by itself because its interface is unique to itself.\nTo give two easy-to-understand examples, I will compare Windows to GNU. Windows is primarily graphical. It does have the powershell but no one uses it. As a result of using primarily graphical software, Windows is a huge operating system. It cannot even run smoothly on most old computers. The GNU core utilities are the opposite of Windows. GNU is tiny because it is comprised of small command-line programs that do one thing well and work together.\nHandle text streams Unlike graphical user interfaces, text streams are a universal interface. This means that all programs use text streams. Programs should handle text streams directly and efficiently, that should be their main focus. Obviously, all command-line programs handle standard input and standard output within the terminal. However, graphical programs only handle text streams within the graphical user interface. It is impossible to pipe the output of a command into that of another in a graphical user interface because it does not handle text streams directly.\nEasier to Use It may not seem like it, but command-line software is easier to use than graphical software. All command-line programs work the same way, while all graphical programs work differently. For each graphical program you use, you will have to learn the user interface. If you do not know how to use it, you will painfully have to search how to do so online. This is one of the reasons why most people only use an extremely limited diversity of software. For each command-line program you use, you might not even have to do anything new at all. Most of them have very similar options to do the same thing.\nIf you need help with a command-line program, getting help is always easy. Most of them have a help flag (usually --help and -h). For example: to get help with the awk command, all you have to do is run awk --help or awk -h. For more detailed help, you can read the manual page instead, using the man command. For example: to read awk’s man page, run man awk. To search for man pages, you have to run mandb for the first time as root. After you have updated the database, simply run apropos ..\nEasier to Write Not only is command-line software easier to use, it is also easier to write. In my previous post, I explained why programming is invaluable for everyone. Writing graphical software is extremely difficult as you need a lot of experience to do so. Writing command-line software is surprisingly easy because you will have experience with using them. If you favor open-source software—which you should, you can not only write your own unique programs, but also modify existing programs. This will help you optimize your workflow and make you more efficient with computers. Graphical programs are not only usually closed-source, but even when they are open-source, their code-base is huge and not legible for most people.\nConclusion To conclude, I want to clarify that I am not against graphical user interfaces. The purpose of this point is to prove that you should favor command-line software, you should not use it to replace all graphical software. Command-line software should be used most of the time, especially when the task is simple. Graphical software should be used when absolutely necessary. You should never render three-dimensional models using the command-line. Similarly, you should never use a command-line web browser.\nReferences Norman, Donald. (1981). The truth about unix: The user interface is horrid. http://www.ceri.memphis.edu/people/smalley/ESCI7205_misc_files/The_truth_about_Unix_cleaned.pdf\n  ","date":"2022-05-07","permalink":"https://amarakon.github.io/amarakon.com/blog/you-should-prefer-command-line-software/","tags":["cli"],"title":"You Should Prefer Command-Line Software"},{"content":"Most people view programming as something that only a specific type of people are able to do and should do. This specific type of person is portrayed as a genius; smarter than everyone else. This means that they think most normal people are unable to learn programming because they are not smart enough. But since they do not want to learn it themselves, they make the excuse that it is not important for them. It does not require smartness to learn programming, it only requires time, desire, and effort.\nTime A common excuse for dozens of things outside of programming is “I don’t have enough time.” Most people who say this really mean to say “I don’t want to do this.” If someone really does not have enough time, that means they spend the entire day only doing things they must do. This is almost never the case though. Most people have enough time to use social media, watch movies, play games, and other unproductive things. Most people come home from school or work tired, so it is no surprise that they spend their time doing unproductive things.\n  This video of Floyd Mayweather proves that most adults have four hours of spare time. You could spend only one hour every day to learn programming and easily become talented at it. You would still have three more hours to spend time with your family and do other things. You should not use your tiredness and previous hard work as an excuse to prevent you from doing great things. Rather, it should only motivate you more. If you can spend nine hours every day working for a company, you can spend one hour every day working for yourself.\nProgramming seems like it requires more than one hour a day of practice to become good at. This depends on the type of language. Most markup languages are surprisingly easy to learn. For example, it takes about ten minutes to learn the basics of Markdown. Almquist shells are not as easy to learn as markup languages, but their syntax is also easy for English readers to understand. To become good at writing shell scripts, it just takes a little bit of practice. High-level programming languages like Python are slightly more difficult to learn than almquist shells but also many times less valuable. I avoid learning these types of languages unless necessary. Middle-level programming languages like C are difficult but manageable, and they are extremely valuable and fast. Just like high-level languages, I would not recommend learning low-level languages unless absolutely necessary.\nDesire You should absolutely desire learning programming before you actually do it. Some people learning programming do not have a clue as to why they are and how it is important. This is because schools tend to only teach how to do things in programming, and not why to do them. The most important reason to code is to create programs that improve life in any way. You should, for example, write a shell script that automatically does something that you would have to manually do every time. The vast majority of my projects on my GitHub page are simple shell scripts that I wrote for myself.\nEven though I wrote them for myself, they are also there for anyone in the public to use for any reason. This is the beauty of open-source software. Open-source software makes programming much easier that it otherwise would be because you can easily look at anyone’s code and learn how a program is made. Understanding how programs are made is not only important for creating software, but for using it as well. You will acquire a better taste of what makes good and bad software, and this will help you learn even further. It will also further drive your desire, as you might want to create a type of program nobody has created before or change something in the industry.\nProgramming makes you look smarter than you actually are. Since it does not specifically require intelligence to code—but it seems that way, programming makes you look “nerdy” in a good way. To speak in detail about certain programming terms that others will not understand certainly makes you look smart. Try not to deter anyone else from learning to do so themselves though. It is something that should definitely be added to your resume to improve your job opportunities.\nEffort When programming, you should put in actual effort to do so. Some people may have the time and desire but not the effort. They might want to program to quickly get a software engineering job and make money. This is wrong because it is not the right reason to program. The right reason to program is to improve everyday life. Program for yourself and others before you program for money.\nRespectfully, you should program with the right tools. It does not make sense to be a programmer and simultaneously use bad software—that is hypocritical. Do not use any version of Windows as your main operating system. Windows 10 and below do not even have a proper shell, while Windows 11 shamelessly and disgracefully copied Linux (Microsoft, 2021) and KDE Plasma (Giri, 2021). Wix is an abysmal website builder that does not even function properly and is ugly and extremely limited. You should be programming on Linux. You should be creating websites by coding in HTML, CSS, and JavaScript, or by using an R package. In order to actually be a valuable programmer, you need to create an environment where you can create good programs. If you refuse to create such an environment, you refuse to put in the effort, programming becomes worthless.\nIf you are putting in the correct amount of effort, programming should come naturally to you. You should not be reminding yourself to be programming, but it should come naturally with the things you want to do. For example, I naturally always improve this website by putting in my effort. I know that my website is useful and valuable, so I update it every day. If my website was useless and worthless, I would not care about it. When schools teach computer science, they do not teach the programs’ uses and values, causing their students to be lost. Along with programming you should follow a programming philosophy, like free software philosophy.\nReferences Giri, Arindam. (2021). Windows 11 looks inspired by KDE plasma and GNOME. https://www.debugpoint.com/2021/06/windows-11-inspiration-linux-kde-plasma\n Microsoft. (2021). Windows subsystem for linux documentation. https://docs.microsoft.com/en-us/windows/wsl\n  ","date":"2022-05-06","permalink":"https://amarakon.github.io/amarakon.com/blog/programming-is-invaluable-for-everyone/","tags":["programming"],"title":"Programming is Invaluable for Everyone"},{"content":"Gentoo Linux is a 100% free operating system. All of its source code is publicly available on GitHub, meaning that it’s open-source. It is licensed under a free license: GNU General Public License (Version 2). It does not include any preinstalled proprietary software. Its package manager, Portage, blocks proprietary software against the user’s will by default. All of these reasons prove that is a completely free operating system that is against the use of proprietary software, so it should be in the Free Software Foundation’s (FSF) list of free Linux distributions.\nFree System Distribution Guidelines (GNU, 2022b) The GNU free system distribution guidelines (GNU FSDG) is an article supported by the FSF. It includes the guidelines that a distribution must follow in order to be endorsed by the FSF. Gentoo Linux easily follows these guidelines and I will prove it.\nComplete distributions Only distributions that are complete in themselves and ready to use can make the list. The distribution should be self-hosting, meaning that the distribution cannot include free software that can only be built by using proprietary software. “If a distribution is incomplete—if it requires further development, or presupposes installing other software as well—then it is not listed here, even if it is free software.” Even though Gentoo’s installation process is minimal, it still includes all the software necessary to install it. It does not include any software that can only be built by using proprietary software. Gentoo is complete, fully developed, and never presupposes installing other software.\nLicense rules  All information for practical use in a free distribution must be available in source form.\n  The information, and the source, must be provided under an appropriate free license. We evaluate specific licenses and list our determinations in our license list.\n Like mentioned in the opening paragraph, all of Gentoo’s source code is licensed under GPL-2. GPL-2 is obviously an appropriate free license because it is made by the GNU Project which is supported by the FSF. GPL-2 is part of the official GNU license list.\nNon-free firmware  Some applications and drivers require firmware to function, and sometimes that firmware is distributed only in object code form, under a nonfree license. We call these firmware programs “blobs.” On most GNU/Linux systems, you’ll typically find these accompanying some drivers in the kernel Linux. Such firmware should be removed from a free system distribution.\n Since Gentoo uses a minimal command-line installation process, no blobs are included in the operating system. The linux-firmware package is not installed—actually, it is blocked. Gentoo blocks all proprietary program packages, but obviously that can be changed with any operating system—even those that are approved by the FSF.\nNon-functional data  Data that isn’t functional, that doesn’t do a practical job, is more of an adornment to the system’s software than a part of it. Thus, we don’t insist on the free license criteria for non-functional data.\n Gentoo is the most minimal and best functioning distribution there is. There is no line of code in the Gentoo source that is unnecessary.\nTrademarks  Trademarks are associated with some software. For example, the name of a program may be trademarked, or its interface may display a trademarked logo. Often, the use of these marks will be controlled in some way; in particular, developers are commonly asked to remove references to the trademark from the software when they modify it.\n Gentoo’s trademark is completely reasonable. Its type of trademark is generally accepted in the free software demographic.\nDocumentation  All the documentation in a free system distribution must be released under an appropriate free license. Additionally, it must take care not to recommend nonfree software.\n While Gentoo does have wiki pages on proprietary software, it does not recommend them.\nPatents  We don’t generally ask free system distributions to exclude software because of possible threats from patents.\n I do not understand why this section is in the FSDG. This automatically qualifies every distribution.\nNo malware Gentoo does not contain any digital rights management, back doors, or spyware.\nCommitment to correct mistakes According to Wikipedia (2022), in 2018 the Gentoo GitHub repository was hacked because an attacker was able to deduce the password. Gentoo immediately responded by improving their security practices to prevent this from happening again. Gentoo has made no other major mistakes.\nMaintenance Even though it is not popular, Gentoo is still maintained. Many new packages and wiki pages are constantly being added every day.\nName confusion  We will not list a distribution whose name makes confusion with nonfree distributions likely. For example, if Foobar Light is a free distribution and Foobar is a nonfree distribution, we will not list Foobar Light. This is because we expect that the distinction between the two would be lost in the process of communicating the message.\n This is pretty easy to explain. There are no proprietary distributions with an almost identical name to Gentoo. There is not any distribution like that for that matter, free or non-free.\nPlease teach users about free software Gentoo obviously teaches users about free software. It is the perfect distribution for learning. Since it requires effort and knowledge, all users will naturally learn plenty of information about Linux and free software in general. The Gentoo wiki is also my favorite wiki website. It is significantly more detailed than any other distribution’s wiki.\nPlease avoid repeating propaganda and confusion  Please see our list of words to avoid, which are either biased, misguided or misleading, and try to avoid them in your public statements and discussions with the public.\n Gentoo (wiki) uses good vocabulary and does not use words incorrectly, does not spread any propaganda, and does not mislead people.\nFree Software Foundation’s Justification The Free Software Foundation justifies not including Gentoo Linux on their list of free Linux distributions with the following short statement: “Gentoo includes installation recipes for a number of nonfree programs in its primary package system” (GNU, 2022a). This is true, Gentoo does include non-free program packages in its primary package system. But this should not disqualify Gentoo from being approved by the FSF. First, the Gentoo wiki does not endorse the installation of these packages. It has webpages about these packages but they are never unreasonably referenced anywhere, let alone endorsed. All of the applications and tools recommended and endorsed by Gentoo wiki are free (Gentoo, 2022a, 2022b). Even if the Gentoo wiki did endorse proprietary software, that would not matter because then Gentoo wiki is not part of the Gentoo operating system.\nThe GNU FSDG states “The system should have no repositories for nonfree software and no specific recipes for installation of particular nonfree programs (GNU, 2022b).” Pay attention to the wording. Gentoo has no repositories for non-free software, but it has a repository with non-free software. That is an important distinction. Like I pointed out earlier, the actual operating system does not contain specific recipes for the installation of particular non-free programs, but the Gentoo wiki reasonably does. It does not matter whether it is the official Gentoo wiki that includes these recipes or a third-party article. Neither are included in the operating system.\nIf Gentoo does not follow the GNU FSDG, then neither do the supposedly free distributions endorsed by the FSF. It is possible and easy to add proprietary software in these distributions by adding a third-party repository. The FSF clearly thinks that any distribution which makes it possible to install proprietary software should be disqualified. I understand this view, but that should make all of the currently approved distributions disqualified as well. True freedom is giving the user the choice to make responsible and good decisions without any unreasonable authority. Gentoo Linux is a perfect example of an operating system that gives its users true freedom.\nenergyman76b on Gentoo forums:\n The FSF hates user freedom.\n References Gentoo. (2022a). Recommended applications. https://wiki.gentoo.org/wiki/Recommended_applications\n Gentoo. (2022b). Recommended tools. https://wiki.gentoo.org/wiki/Recommended_tools\n GNU. (2022a). Explaining why we don’t endorse other systems. https://www.gnu.org/distros/common-distros.en.html\n GNU. (2022b). Free system distribution guidelines. https://www.gnu.org/distros/free-system-distribution-guidelines.en.html\n Wikipedia. (2022). Gentoo linux. https://en.wikipedia.org/wiki/Gentoo_Linux\n  ","date":"2022-05-05","permalink":"https://amarakon.github.io/amarakon.com/blog/gentoo-linux-should-be-approved-by-the-free-software-foundation/","tags":["foss","fsf"],"title":"Gentoo Linux Should be Approved by the Free Software Foundation"},{"content":"In my previous blog post titled How to Install Gentoo – The Efficient Way, I said that Gentoo Linux is “truly the best operating system of all time” (Al-Zubaidi, 2022). I stand by that statement and there are many reasons as to why I think it is. The top three currently most popular operating systems are Windows 10, macOS, and Chrome OS. You may or may not have heard of Linux.\nFigure 1: Operating system market share  Statcounter (2022)\nTechnically, Linux is not an operating in and of itself, rather it is the core of the operating system and each distribution should provide all the additional programs required for that distribution. There are hundreds of distributions of Linux, so making a decision is tirelessly difficult for most people who are just getting started with Linux. Many people have the bad habit of constantly distribution-hopping between different distributions to experience all of them for themselves. Some people suggest to “choose the distro that works the best for you” (Smith, 2018), but the problem with this suggestion is that most people do not know what works best for them. The biggest issue that makes it difficult to choose the correct distribution is that too many of them are similar to each other. A lot of them are only different by their desktop environment, theme, and package manager. This post is not about solving the distribution-hopping problem, it will be instead focusing on how the Gentoo stopped me from continuing to do so.\nWhat makes Gentoo stand out from every other Linux distribution is that it is not similar to any other. Even its forks—such as Funtoo, Calculate Linux, and Redcore Linux—are not similar to pure Gentoo. The most distinct features of Gentoo is its package manager, system management, speed, and versatility.\nPortage: Package Manager In my opinion, Gentoo’s package manager, Portage, has the best syntax for any package manager. The output on the terminal is undoubtedly beautiful. Gentoo is a source-based based distribution. This means that compiles programs from their source code instead of using prebuilt binaries. The biggest benefit from this method is the ability to optimize the operating system for your specific computer using USE flags. To what extent you want to optimize Gentoo is absolutely your decision to make. You can go all out, setting as many USE flags as possible to achieve ultimate minimalism. You can set a moderate amount of USE flags to make the most important optimizations while leaving trivial options to their defaults. Or you can use no optimizations at all and instead benefit from the other perks that come with using Portage and—more broadly, Gentoo.\nThe second biggest benefit of Portage is greater security. When you install an precompiled binary—even if it is free software, you have to place your trust in whoever compiled it. It is possible that somebody could have changed the code and it would be impossible to prove it. The chances of this issue occuring is obviously impossible if you compile the software from its source code. You might think that it is unlikely to notice any malicious code in large projects, but that is definitely not the case.\nBen:\n In theory, at some point in time every line of code in Chromium, Linux, Firefox, etc. has been looked at by at least one person. Furthermore someone definitely looks at every change made. If the source code was ever non-malicious, it would be difficult to make it malicious.\n Nevertheless, there are a considerable amount of binary packages in Gentoo. You can check the names and the amount by running these commands respectfully:\n$ eix \u0026#34;\\-bin\u0026#34; -c --in-overlay gentoo | grep \u0026#34;\\-bin \u0026#34; $ eix \u0026#34;\\-bin\u0026#34; -c --in-overlay gentoo | grep \u0026#34;\\-bin \u0026#34; | wc -l If you do not have Gentoo installed and want to search for packages, the Gentoo Portage Overlays search engine is a good alternative.\nBinary packages are common for huge programs that take hours to build, or proprietary software. Gentoo prevents you from installing any software that is not licensed with a free license by default. I do not recommend installing proprietary software—but if you actually want to, set ACCEPT_LICENSE=\u0026quot;*\u0026quot; (The default is -* @FREE (Gentoo, 2021b).) Even binary packages have USE flags to customize them to the most possible, although less than source packages of course. Options other than USE flags exist and can be set globally in /etc/portage/make.conf or per-package in /etc/portage/package.env (Gentoo, 2022a, 2022b). These include compiler flags, make and emerge options, features, CPU flags. Each of these options are covered extensively in the Gentoo wiki.\neselect: System Management There are ways other than the use of the package manager with which you can configure your operating system. Most distributions do not pay attention to this, thus they have poor system configuration. Arch Linux, which has the excellent package manager pacman, has bad system management otherwise. Gentoo includes the eselect command which allows you to easily manage your system. You can easily manage software versions, environment variables, repositories. It is a nice bonus feature that shows the passion and attention to detail the Gentoo developers have. Despite the difficult installation process, Gentoo is the easiest distribution to use. To give an example, it is much easier and safer to set your /bin/sh symlink. On Arch, you would have to risk breaking your entire system by running this command:\n# ln -sfT /bin/dash /bin/sh On Gentoo, you can use eselect:\n# eselect sh set dash Speed Gentoo Linux was named after the gentoo penguin, the fastest swimming species of penguin (Wikipedia, 2022). The gentoo penguin is also slim (minimalist) unlike emperor penguins which are fat (bloated). This is probably not intended, but a detail I noticed. The reason Gentoo is very fast is its extensive customization. As discussed before, you can optimize the operating system to suit your computer and needs. This causes it to run considerably faster, since there is minimal bloat and software is trimmed down. Gentoo boots faster than most other operating systems due to this minimalism and its init system, OpenRC. It takes less than ten seconds to fully boot a computer even when using BIOS—which is slower than UEFI.\nGentoo’s resource usage is always surprisingly low. I rarely ever exceed one gigabyte of memory usage even with many windows and browser tabs open. Since the file size of customized binaries is smaller than those of prebuilt binaries, you will notice more free disk space when using Gentoo. Just make sure to clean out your source code files and prebuilt binary packages. You can do so with eclean. You will also be able to complete the same tasks with a slower CPU frequency, saving electricity and money. I notice that it is generally much snappier in every way than any other operating system I have ever used.\nVersatility Gentoo Linux is versatile because it can do anything on any type of computer. It is currently available for nine different CPU architectures (Gentoo, 2021a). You can install Gentoo on anything between a Raspberry Pi and a supercomputer. It works equally well for all types of computers because it is optimized for the specific type of computer. The reason (unlike most original distributions) it has barely any derivatives is that it’s already complete and does not need any major changes. The only gripe I have with Gentoo is that some of its software—including Portage, is written in Python. But with the native-extensions USE flag, Portage will be compiled with native C extensions to speed it up. Gentoo Linux is the closest thing to a perfect operating system.\nReferences Al-Zubaidi, Amar. (2022). How to install gentoo – the efficient way. https://amarakon.github.io/amarakon.com/blog/how-to-install-gentoo-the-efficient-way\n Gentoo. (2021a). Handbook: Main page. https://wiki.gentoo.org/wiki/Handbook:Main_Page\n Gentoo. (2021b). License groups. https://wiki.gentoo.org/wiki/License_groups\n Gentoo. (2022a). /etc/portage/make.conf. https://wiki.gentoo.org/wiki//etc/portage/make.conf\n Gentoo. (2022b). /etc/portage/package.env. https://wiki.gentoo.org/wiki//etc/portage/package.env\n Smith, Luke. (2018). What is ‘the best’ linux distro? https://lukesmith.xyz/blog/what-is-the-best-linux-distro\n Statcounter. (2022). Desktop operating system market share worldwide. https://gs.statcounter.com/os-market-share/desktop/worldwide\n Wikipedia. (2022). Gentoo linux. https://en.wikipedia.org/wiki/Gentoo_Linux\n  ","date":"2022-05-04","permalink":"https://amarakon.github.io/amarakon.com/blog/gentoo-linux-the-best-operating-system-ever-made/","tags":["foss"],"title":"Gentoo Linux: The Best Operating System Ever Made"},{"content":"So you finally moved from the beginner distributions and you know want to install truly the best operating system of all time; Gentoo Linux. Contrary to popular belief, installing this operating system is not difficult in the slightest but it is certainly time consuming. Usually it will take around five hours to install. This might deter you, but remember that this operating system will actually save you time in the long run. Not only is it faster than other operating systems, it also makes the user more intelligent, leading to efficient computer usage. No current Gentoo user regrets spending five hours installing the operating system to save many more hours in total.\nFor this installation tutorial, you will need to have an existing Unix-like operating system—like any Linux distribution. Before I get to the beginning of the installation process, there are a few things you must know. First, you have to care about computing for the installation of Gentoo to be worth it. Second, please view the Gentoo handbook while you are watching this video. It is unlikely but possible that some of the information in this video will be outdated. The Gentoo wiki also has many details that I will not go into because they are not important enough. Third, you need to know the architecture of your computer’s CPU, usually it is AMD64. Finally, you must know whether your computer firmware uses BIOS or UEFI. Generally, only extremely old computers support only BIOS, only terrible new computers support only UEFI, and most computers support both. You should be completely sure though to avoid messing your entire installation.\nPrepare the Disks Obviously, since Gentoo requires installation from the command-line, you will need to open a terminal. Use the lsblk command do check the available block devices. To be cautious, you can unplug any storage devices you do not want to accidentally wipe. Also make sure to know which block device your current running operating system so you do not accidentally wipe that either. Use the wipefs command to wipe a block device if it already has a partition scheme. Then use the cfdisk command to begin partitioning.\n$ lsblk # wipefs -a /dev/*NAME* # cfdisk /dev/*NAME* If you’re using BIOS, select DOS. And if you’re using UEFI, select GPT. If you’re using BIOS, all you need is one partition. If you’re using UEFI, you need to make a partition that is at least 128 MB, this will be the boot partition. You should label this partition “EFI system.” Then create the second partition using the rest of the space.\nOnce you exited cfdisk, you need to format your partitions. If you’re using BIOS, all you have to do is format your one partition as ext4 or any other usable file system you prefer:\n# mkfs.ext4 /dev/*NAME*1 If you’re using UEFI, you must format your first partition as VFAT and your second partition your preferred file system:\n# mkfs.fat -F 32 /dev/*NAME*1 # mkfs.ext4 /dev/*NAME*2 If you’re using BIOS, mount the root partition:\nmkdir /mnt/gentoo mount /dev/*NAME*2 /mnt/gentoo If you’re using UEFI, mount the root partition and the boot partition:\n# mkdir /mnt/gentoo # mount /dev/*NAME*2 /mnt/gentoo # mount /dev/*NAME*1 /mnt/gentoo/boot Installing the Gentoo Installation Files Temporarily set the correct date and time using the MMDDhhmmYYYY syntax:\n# date *MMDDhhmmYYYY* Go to the download section of the Gentoo wiki and copy the link of a stage tarball. I recommend the standard Stage 3 OpenRC. Download the tarball to /mnt/gentoo using the link you copied. Decompress the archive afterwards.\n$ cd /mnt/gentoo # wget *URL* # tar xpvf stage3-*.tar.xz --xattrs-include=\u0026#39;*.*\u0026#39; --numeric-owner Run # nano /mnt/gentoo/etc/portage/make.conf. Set march equal to native. The -j flag means the amount of threads you want Portage, the package manager to use. The -l flag means the load average. The PORTAGE_NICENESS option refers to how much priority portage should have (the higher the number, the higher the priority). Setting ACCEPT_KEYWORDS=\u0026quot;~amd64\u0026quot; will allow portage to install bleeding edge software. The VIDEO_CARDS option is dependent on your video card (Gentoo, 2020). The USE flags are for features you want or do not want in your packages. The GRUB_PLATFORMS option should be set to \u0026quot;pc\u0026quot; for BIOS and \u0026quot;efi-64\u0026quot; or \u0026quot;efi-32\u0026quot; for UEFI. Copy everything else I did.\nCOMMON_FLAGS=\u0026#34;-march=native -O2 -pipe\u0026#34; CFLAGS=\u0026#34;${COMMON_FLAGS}\u0026#34; CXXFLAGS=\u0026#34;${COMMON_FLAGS}\u0026#34; MAKEOPTS=\u0026#34;-j2 -l3.6\u0026#34; EMERGE_DEFAULT_OPTS=\u0026#34;-j2 -l3.6\u0026#34; PORTAGE_NICENESS=\u0026#34;1\u0026#34; ACCEPT_KEYWORDS=\u0026#34;~amd64\u0026#34; VIDEO_CARDS=\u0026#34;intel i915 i965\u0026#34; USE=\u0026#34;X pulseaudio savedconfig -bluetooth -geolocation -drm\u0026#34; # NOTE: This stage was built with the bindist Use flag enabled PORTDIR=\u0026#34;/var/db/repos/gentoo\u0026#34; DISTDIR=\u0026#34;/var/cache/distfiles\u0026#34; PKGDIR=\u0026#34;/var/cache/binpkgs\u0026#34; # This sets the language of build output to English. # Please keep this setting intact when reporting bugs. LC_MESSAGES=C L10N=\u0026#34;\u0026#34; # Other GRUB_PLATFORMS=\u0026#34;pc\u0026#34; GENTOO_MIRRORS=\u0026#34;https://mirror.csclub.uwaterloo.ca/gentoo-distfiles/ https://gentoo.osuosl.org/ https://mirrors.rit.edu/gentoo/ http://mirror.csclub.uwaterloo.ca/gentoo-distfiles/ http://gentoo.osuosl.org/ http://mirrors.rit.edu/gentoo/\u0026#34; Installing the Base Set up the gentoo repository:\n# mkdir -p /mnt/gentoo/etc/portage/repos.conf # cp /mnt/gentoo/usr/share/portage/config/repos.conf /mnt/gentoo/etc/portage/repos.conf/gentoo.conf # cp --dereference /etc/resolv.conf /mnt/gentoo/etc/ Mount necessary file systems:\n# mount --types proc /proc /mnt/gentoo/proc # mount --rbind /sys /mnt/gentoo/sys # mount --make-rslave /mnt/gentoo/sys # mount --rbind /dev /mnt/gentoo/dev # mount --make-rslave /mnt/gentoo/dev # mount --bind /run /mnt/gentoo/run # mount --make-slave /mnt/gentoo/run  Enter the new installation environment by chrooting into it:\n# chroot /mnt/gentoo /bin/bash # source /etc/profile # export PS1=\u0026#34;(chroot) ${PS1}\u0026#34; Installing a Gentoo ebuild repository snapshot from the web and update it:\n# emerge-webrsync # emerge --sync Update the @set (all of your packages). This will take a lot of time. If you get a circular dependency error, which is not uncommon, consult the Gentoo wiki (Gentoo, 2022a):\n# emerge -uDN @world  Select the time zone for the system. Look for the available time zones in /usr/share/zoneinfo/. I chose America/Toronto.\n$ ls /usr/share/zoneinfo # echo \u0026#34;America/Toronto\u0026#34; \u0026gt; /etc/timezone # emerge --config sys-libs/timezone-data Choose the right locale by running # nano /etc/locale.gen:\nen_CA.UTF-8 UTF-8 locale-gen Check the locale list by running $ eselect locale list, then select the right one:\nAvailable targets for the LANG variable: [1] C [2] C.utf8 [3] en_CA.utf8 [4] POSIX [ ] (free form) # eselect locale set 3 Reload the environment:\n# env-update \u0026amp;\u0026amp; source /etc/profile \u0026amp;\u0026amp; export PS1=\u0026#34;(chroot) ${PS1}\u0026#34; Install the Kernel The easiest way to install the kernel is by installing the gentoo-kernel package. If you wan to customize the kernel, check the Gentoo handbook page on configuring the Linux kernel (Gentoo, 2015) If you need Linux firmware (you most likely do), then install the linux-firmware package.\n# emerge gentoo-kernel linux-firmware Configure the System You need to set up fstab:\n# blkid \u0026gt; /etc/fstab Open the file by running # nano /etc/fstab. If you have an SSD, you should enable the noatime and discard options. If you are using BIOS, arrange your fstab to something like this:\n# /dev/sda1 UUID=9167fa6f-bb77-4337-a547-48a20506d297 / ext4 noatime,discard 0 1  If you are using UEFI, do something like this instead:\n# /dev/sda1 UUID=dbb15f21-c203-4665-a520-7f92f51661ae /boot vfat defaults,noatime 0 2 # /dev/sda2 UUID=9167fa6f-bb77-4337-a547-48a20506d297 / ext4 noatime,discard 0 1  Set the host name by running # nano /etc/conf.d/hostname:\nhostname=\u0026quot;*host name*\u0026quot;  Install NetworkManager and add it to the default runlevel for internet connection:\n# emerge net-misc/networkmanager # rc-update add NetworkManager default Edit the hosts file by running # nano /etc/hosts:\n127.0.0.1 localhost ::1 localhost 127.0.1.1 *host name*  Set the root password by simply running # passwd.\nConfigure the Bootloader You now need to install a bootloader, the most common one is GRUB. When using BIOS:\n# emerge sys-boot/grub # grub-install /dev/*NAME* # grub-mkconfig -o /boot/grub/grub.cfg When using UEFI:\n# emerge sys-boot/grub # grub-install --target=x86_64-efi --efi-directory=/boot # grub-mkconfig -o /boot/grub/grub.cfg Reboot the system # exit # cd # umount -l /mnt/gentoo/dev{/shm,/pts,}  # umount -R /mnt/gentoo # reboot Finalize the Installation First, log in as root:\nLogin: root Password: *password*  Add a user for daily use and set its password:\n# useradd -mG wheel,news,audio,video,portage *user* # passwd *user* Finally, remove the now unneeded tarball from the root directory:\n# rm /stage3-*.tar.* Congratulations, you have successfully completed the installation of Gentoo Linux. But do not get too excited, because we are not technically done yet.\nGraphical Environment Now all you need to do is install a display server, xinit or a desktop manager, and a window manager or a desktop environment.\n# emerge x11-base/xorg-server x11-apps/xinit x11-wm/dwm $ echo \u0026#34;exec dwm\u0026#34; \u0026gt; ~/.xinitrc $ startx References Gentoo. (2015). Configuring the linux kernel. https://wiki.gentoo.org/wiki/Handbook:AMD64/Installation/Kernel\n Gentoo. (2020). Video cards. https://wiki.gentoo.org/wiki/Category:Video_cards\n Gentoo. (2022a). Circular dependencies. https://wiki.gentoo.org/wiki/User:Sam/Portage_help/Circular_dependencies\n Gentoo. (2022b). Gentoo AMD64 handbook. https://wiki.gentoo.org/wiki/Handbook:AMD64\n  ","date":"2022-05-03","permalink":"https://amarakon.github.io/amarakon.com/blog/how-to-install-gentoo-linux-the-efficient-way/","tags":["foss","tutorial"],"title":"How to Install Gentoo Linux – The Efficient Way"},{"content":"I am a high school student who happens to be genuinely interested in technology. Specifically, I am interested in operating systems, programming, and free software philosophy. I have a good understanding of what makes a good piece of technology and what makes a bad piece of technology. One of the most important factors in this distinction is the effort it requires to use it. If a piece of technology is extremely complicated but effortless to use (i.e., dumbed down), then it is generally bad. If a piece of technology is minimalist but requires genuine effort to use (e.g., C, LaTeX, flip-phones), then it is generally good.\nThe pandemic gave teachers an excuse to be lazy and government the excuse to be tyrannical. The government did an uncountable amount of lockdowns and schools went online during them. Exams were canceled, so it is unsurprising that the majority of students supported the cruel lockdowns as well. Since we were dependent on technology for school, what I have noticed is that education wants to dumb down technology.\nClassroom is Terrible We used a website developed by Google called Classroom. This is the one of the worst websites I have ever had to use in my entire life. First, it is extremely slow. Each page takes a couple of seconds to load while most other websites I use load instantly. The design is also too plain and the website is too bright. The purpose of these seemingly bad decisions is to dumb it down; to make it accessible to everyone. This might seem like a good thing to do, but for most people who can actually use computers properly, it slows us down. If we are dependent on easy-to-use technology, it is inevitable that we become less intelligent.\nAnother more important reason school boards decided to use Classroom for online education is the fact that Classroom is developed by Google. Many people think that Classroom is superior because it can easily interact with other Google services such as Meet. But this fact does not make Classroom any better, it only makes it worse. It is designed to create an ecosystem in which everything is more convenient, but everything is also more restrictive. One of my classes was called ACAM, I forgot what this acronym stands for. In this class, we used creative technology programs such as Blender, Photoshop, Illustrator. I thoroughly enjoyed that class, but the main issue that bothered me about it is that we never went in depth. We were always only at the surface level.\nWix is a Scam When we were designing our website, we designed them with Wix. Wix is a website to design websites, and its main attraction is that it is \u0026ldquo;easy\u0026rdquo; to use. Instead of actually writing the code necessary to create a website, you design a website in the website. This is not anywhere near as easy as it sounds. It took me many hours just to get my blog up and running, and most of the time was not spent actually writing. This is a classic example of something that is only supposed to appear easy to attract normies into it. I promise you that not one good, respectable website has ever been designed with Wix or any of those other website-creating websites created by lazy entrepreneurs for lazy entrepreneurs. Likewise, I do not think anyone from my ACAM class will ever grow up to use creative technology in their profession. They might use it in other school assignments, but probably not in the real world.\nCreative technology education in school is not meant to prepare students for the real world, rather to deter them from it. They never taught us actual HTMl and CSS, or at least any decent package that will convert markup to HTML and CSS. Even though those methods require actual effort and perseverance, they are the only way you can make a respectable website. With Wix, everyone\u0026rsquo;s experience is the basically same. In my class, the range of marks was not wide; it was surprisingly narrow. This is not due to lenient marking from my polite teacher—although that could be a factor. This was mainly due to the fact that this technology was dumbed down. There was no real challenge so there was no real reward either.\nThis Website I created this website with an R package called blogdown, getting it up and running was the terribly hard part. But after it is up and running, everything else is smooth sailing. With Wix, getting your website up and running is the easy part—but generally adding things to your website is bound to be difficult. Moreover, I am in complete control over what my website ends up actually looking like. Wix cannot possibly give you that control even if it wanted to because you are not working directly with the website. You are working indirectly with the website and underneath is where Wix itself is handling all the HTML, CSS, and JavaScript. The important \u0026ldquo;separation of content and presentation\u0026rdquo; design principle is ignored in favor of the convenient \u0026ldquo;what you see is what you get\u0026rdquo; principle. Most people who use Wix do not even know what those things mean even though they should, as they are not supposed to.\nComputer Science Since I was only slightly experienced in coding, I joined the computer science club in my school. I expected to expand my skills to prepare myself for actual coding instead of just writing scripts for my own use. On my first day in this club, I immediately noticed embarrassing issues. The teacher was teaching primarily on a white board, making the class seem more like a math class. Not only that, we were also doing work with a pencil and paper. In pretty much every other class, teachers have refrained from printing documents and are now creating online assignments on Classroom. This pathetic downgrade of education has been justified by the irrational excuse of \u0026ldquo;protecting the environment.\u0026rdquo; Everyone was used to it after the lockdowns so no one was surprised nor did they care. I might be completely alone in thinking that all worksheets should be printed for those who do not want to depend on technology. But I am definitely not alone in thinking that it\u0026rsquo;s ridiculous to be spending most of our time in a computer science class on paper and whiteboards.\nThe first and only language you learn in computer science club is Python. There are two problems here: Python is not a good language and schools should teach more than one language. Python is a mediocre language because even though it has readable syntax, it is extremely slow and inapplicable. Almquist shells such as DASH and BASH should be taught first due to their ease of use, practicality, and helpfulness. They are commonly used to automate boring and repetitive tasks. The vast majority of my projects on GitHub are written in shell; I wrote them for my personal use to automate tasks. One-letter languages like C and R should be taught afterwards. They are significantly harder but significantly more powerful as well. Markup languages, such as LaTeX and Markdown, are also important and are widely used for printing or digital distribution.\nSolution Like many other problems, this problem has been intentionally created. It is no accident that schools deter people from being uniquely intelligent. The education system is designed to sterilize individuality and encourage mob mentality. The mob mentality thinks \u0026ldquo;If Wix and Python are the popular choices, they must be good, right?\u0026rdquo; The solution to this problem is obvious: The education system should encourage proper and effortful methods as opposed to dumbed down and effortless ones. Linux Mint should be the operating system installed on school computers instead of Windows 10. The blogdown package for creating websites should be taught in schools instead of Wix—it is easier, smarter, and better in every way possible. Shell, C, R, LaTeX, Markdown, HTML, CSS are examples of computer languages that should be taught instead of Python.\n","date":"2022-05-02","permalink":"https://amarakon.github.io/amarakon.com/blog/education-wants-to-dumb-down-technology/","tags":["websites","programming"],"title":"Education Wants to Dumb Down Technology"},{"content":"What I have noticed about many subjects in life is that many people just want to be sheep. Notice how I said \u0026ldquo;want to be sheep\u0026rdquo; and not \u0026ldquo;are sheep.\u0026rdquo; That is because my emphasis is on the fact that people are choosing to be ignorant. This is true in many cases, especially in politics and computing. In this post, I will be focusing on computing. I want to clarify by saying that I think there is nothing wrong with being ignorant, but it is wrong to be willfully ignorant.\nI remember a couple of years ago I was a very different person than I am today. I was a textbook example of a normie. I would use pretty much the same software everybody else was using. My operating system was Windows 10, my music player was Spotify. There is nothing morally wrong with being that way, but when you are a normie, it is extremely easy to be influenced and taken advantage of. You follow what everybody else was doing regardless if it is good or bad.\nChange One day, I was scrolling through YouTube and I found something that intrigued me. It was a video of somebody comparing three-dimensional rendering between Windows 10 and Linux. I was extremely surprised by how much Linux is blatantly better than Windows 10. For the next couple of weeks, I experimented with Linux without much success. I found it extremely difficult to get basic things done, like connecting to WiFi. Could it be that the normie lifestyle is correct and that alternatives are terrible most of the time?\nI almost gave up, but since I have come so far, I kept using Linux. I eventually solved my main issues with it. I spent the next couple of months experimenting with it and mastering it. During that time, I increasingly learned the evils of common software and how everybody—including myself, fell for that trap. I learned how the programs we use are brainwashing us. This is not an exaggeration in the slightest.\nProblem There is a tiny list of programs that people tend to use. It is surprising how small that list is and how it is still shrinking. There is not much diversity of thought when it comes to things like this. That is my point. That is what I am getting at with this post.\nNot only was I much more free literally by changing my choice of software, but I was free in my thinking as well. I could do things that I never could do before, and I understood things that I have always wanted to understand. It is impossible for me to explain it to you, it is something you must experience for yourselves. The easiest way to explain it is this; technology companies want their users to be ignorant, it benefits them. They want to be the geniuses making the complex programs that they would never use themselves, while you are the incompetent user. They do not want you to be in control.\nThis is evident when you find out that all tech billionaires are extremely strict about technology use. They want you to be a slave to their evil technology that you do not understand. But they do not want their kids to be, because those are just about the only people they truly care about. They know that if you did understand their technology, you would hesitate using it. If you did know that one company literally influences what you know and think about literally everything and which political ideology you support, Google would know that you would hesitate using their search engine. If you did know that your smartphone has devastating affects on your brain and mental health, smartphone companies would know that you would hesitate buying their products. I could go on and on with examples to prove that almost every single piece of technology we use today is problematic at least and purely evil at most.\nSolution To return to the first point I made, there is nothing wrong with being ignorant, but there is plenty of wrong with being willfully ignorant. I believe that most people are willfully ignorant to these facts. Most people would react to this the exact same way. First, they deny it. Then, once you prove it to them, they will justify it with bad excuses. They will pretend like there is nothing wrong with literally every major social media company banning the president of the United States at the exact same time. They will pretend like there is nothing wrong with your data being collected and used to control you. The underlying motivation for these denials and justifications is to hide from reality. Because they know that these things are wrong, but they do not want to take any action. Understandably, most people do not want to drastically change their current lifestyle.\nHowever, once you stop denying the corrupted reality and start embracing alternative software, you will realize just how much more free you will become. You will be able to do things you never could before. It can benefit your intelligence, your productivity, and much more. People have called me weird and a \u0026ldquo;conspiracy theorist\u0026rdquo; for my beliefs. But I know that since my beliefs are grounded in the truth and morality, I will never feel shame for them.\nJust like how in a democratic government, the people should control the government and not the other way around, the users should control tech companies and not the other way around. This is only possible by paying close attention to software licenses, free versus proprietary software, digital rights management, and other important subjects concerning freedom and software. Choose the best options based on those. You should also be extremely picky—because just like politicians, tech companies tend to be corrupt. You should pay attention to your choice of software so that you could finally have the computing freedom that you deserve.\n","date":"2022-05-01","permalink":"https://amarakon.github.io/amarakon.com/blog/you-should-pay-attention-to-your-choice-of-software/","tags":["foss"],"title":"You Should Pay Attention to Your Choice of Software"}]